/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import resources.AircraftCarrier;
import resources.Destroyer;
import resources.Fighter;
import resources.Frigate;
import resources.Helicopter;
import resources.Missile;
import resources.Recon;
import resources.Reconnaissance;
import resources.Resources;
import resources.ResourcesPackage;
import resources.Shell;
import resources.Strike;
import resources.Torpedo;
import resources.Transport;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ResourcesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ResourcesPackage.AIRCRAFT_CARRIER:
				sequence_AircraftCarrier(context, (AircraftCarrier) semanticObject); 
				return; 
			case ResourcesPackage.DESTROYER:
				sequence_Destroyer(context, (Destroyer) semanticObject); 
				return; 
			case ResourcesPackage.FIGHTER:
				sequence_Fighter(context, (Fighter) semanticObject); 
				return; 
			case ResourcesPackage.FRIGATE:
				sequence_Frigate(context, (Frigate) semanticObject); 
				return; 
			case ResourcesPackage.HELICOPTER:
				sequence_Helicopter(context, (Helicopter) semanticObject); 
				return; 
			case ResourcesPackage.MISSILE:
				sequence_Missile(context, (Missile) semanticObject); 
				return; 
			case ResourcesPackage.RECON:
				sequence_Recon(context, (Recon) semanticObject); 
				return; 
			case ResourcesPackage.RECONNAISSANCE:
				sequence_Reconnaissance(context, (Reconnaissance) semanticObject); 
				return; 
			case ResourcesPackage.RESOURCES:
				sequence_Resources(context, (Resources) semanticObject); 
				return; 
			case ResourcesPackage.SHELL:
				sequence_Shell(context, (Shell) semanticObject); 
				return; 
			case ResourcesPackage.STRIKE:
				sequence_Strike(context, (Strike) semanticObject); 
				return; 
			case ResourcesPackage.TORPEDO:
				sequence_Torpedo(context, (Torpedo) semanticObject); 
				return; 
			case ResourcesPackage.TRANSPORT:
				sequence_Transport(context, (Transport) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns AircraftCarrier
	 *     AircraftCarrier returns AircraftCarrier
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         amount=EInt? 
	 *         (drone+=[Drone|EString] drone+=[Drone|EString]*)? 
	 *         (carrieraircraft+=[CarrierAircraft|EString] carrieraircraft+=[CarrierAircraft|EString]*)? 
	 *         (ammunitions+=Ammunition ammunitions+=Ammunition*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_AircraftCarrier(ISerializationContext context, AircraftCarrier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Destroyer
	 *     Destroyer returns Destroyer
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         amount=EInt? 
	 *         (drone+=[Drone|EString] drone+=[Drone|EString]*)? 
	 *         (helicopter+=[Helicopter|EString] helicopter+=[Helicopter|EString]*)? 
	 *         (ammunitions+=Ammunition ammunitions+=Ammunition*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Destroyer(ISerializationContext context, Destroyer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Fighter
	 *     CarrierAircraft returns Fighter
	 *     Fighter returns Fighter
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Fighter(ISerializationContext context, Fighter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Frigate
	 *     Frigate returns Frigate
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         amount=EInt? 
	 *         (drone+=[Drone|EString] drone+=[Drone|EString]*)? 
	 *         (helicopter+=[Helicopter|EString] helicopter+=[Helicopter|EString]*)? 
	 *         (ammunitions+=Ammunition ammunitions+=Ammunition*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Frigate(ISerializationContext context, Frigate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Helicopter
	 *     CarrierAircraft returns Helicopter
	 *     Helicopter returns Helicopter
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Helicopter(ISerializationContext context, Helicopter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ammunition returns Missile
	 *     Missile returns Missile
	 *
	 * Constraint:
	 *     (name=EString amount=EInt?)
	 * </pre>
	 */
	protected void sequence_Missile(ISerializationContext context, Missile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Recon
	 *     CarrierAircraft returns Recon
	 *     Recon returns Recon
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Recon(ISerializationContext context, Recon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Reconnaissance
	 *     Drone returns Reconnaissance
	 *     Reconnaissance returns Reconnaissance
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Reconnaissance(ISerializationContext context, Reconnaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resources returns Resources
	 *
	 * Constraint:
	 *     (name=EString (vehicles+=Vehicle vehicles+=Vehicle*)?)
	 * </pre>
	 */
	protected void sequence_Resources(ISerializationContext context, Resources semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ammunition returns Shell
	 *     Shell returns Shell
	 *
	 * Constraint:
	 *     (name=EString amount=EInt?)
	 * </pre>
	 */
	protected void sequence_Shell(ISerializationContext context, Shell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Strike
	 *     Drone returns Strike
	 *     Strike returns Strike
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Strike(ISerializationContext context, Strike semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ammunition returns Torpedo
	 *     Torpedo returns Torpedo
	 *
	 * Constraint:
	 *     (name=EString amount=EInt?)
	 * </pre>
	 */
	protected void sequence_Torpedo(ISerializationContext context, Torpedo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Vehicle returns Transport
	 *     Drone returns Transport
	 *     Transport returns Transport
	 *
	 * Constraint:
	 *     (name=EString amount=EInt? (ammunitions+=Ammunition ammunitions+=Ammunition*)?)
	 * </pre>
	 */
	protected void sequence_Transport(ISerializationContext context, Transport semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
